(* Generated by ocaml-tree-sitter. *)

(*
   Disable warning 42:
     "this use of Foo relies on type-directed disambiguation,
     it will not compile with OCaml 4.00 or earlier."
*)
[@@@warning "-42"]

(* Disable warnings against unused variables. *)
[@@@warning "-26-27-32"]

open Tree_sitter_bindings
open Tree_sitter_run

let debug = ref false

type mt = Run.matcher_token

external create_parser :
  unit -> Tree_sitter_API.ts_parser = "octs_create_parser_elixir"

let ts_parser = create_parser ()

let parse_source_string ?src_file contents =
  Tree_sitter_parsing.parse_source_string ?src_file ts_parser contents

let parse_source_file src_file =
  Tree_sitter_parsing.parse_source_file ts_parser src_file

let extras = [
  "comment";
  "newline_before_comment";
  "newline_before_binary_operator";
]

let children_regexps : (string * Run.exp option) list = [
  "pat_509ec78", None;
  "quoted_content_square", None;
  "boolean",
  Some (
    Alt [|
      Token (Literal "true");
      Token (Literal "false");
    |];
  );
  "quoted_content_angle", None;
  "imm_tok_pat_5eb9c21", None;
  "imm_tok_pat_8f9e87e", None;
  "quoted_content_bar", None;
  "imm_tok_pat_0db2d54", None;
  "float", None;
  "quoted_content_i_square", None;
  "alias", None;
  "nullary_operator", None;
  "before_unary_op", None;
  "integer", None;
  "nil", None;
  "quoted_content_i_angle", None;
  "pat_cf9c6c3", None;
  "imm_tok_lpar", None;
  "imm_tok_pat_37640cd", None;
  "quoted_content_curly", None;
  "keyword_", None;
  "quoted_content_i_heredoc_double", None;
  "quoted_content_i_curly", None;
  "semgrep_metavariable", None;
  "quoted_content_heredoc_double", None;
  "quoted_content_slash", None;
  "not_in", None;
  "quoted_atom_start", None;
  "quoted_content_single", None;
  "quoted_content_i_slash", None;
  "char", None;
  "quoted_content_double", None;
  "quoted_content_i_bar", None;
  "quoted_content_i_heredoc_single", None;
  "imm_tok_lbrack", None;
  "quoted_content_i_parenthesis", None;
  "quoted_content_parenthesis", None;
  "quoted_content_i_double", None;
  "escape_sequence", None;
  "quoted_content_heredoc_single", None;
  "quoted_content_i_single", None;
  "atom_", None;
  "newline_before_do", None;
  "terminator",
  Some (
    Alt [|
      Seq [
        Repeat (
          Token (Name "pat_509ec78");
        );
        Token (Literal ";");
      ];
      Repeat1 (
        Token (Name "pat_509ec78");
      );
    |];
  );
  "identifier",
  Some (
    Alt [|
      Alt [|
        Token (Name "pat_cf9c6c3");
        Token (Literal "...");
      |];
      Token (Name "semgrep_metavariable");
    |];
  );
  "operator_identifier",
  Some (
    Alt [|
      Token (Literal "&");
      Alt [|
        Token (Literal "+");
        Token (Literal "-");
        Token (Literal "!");
        Token (Literal "^");
        Token (Literal "~~~");
        Token (Literal "not");
      |];
      Token (Literal "@");
      Token (Literal "<-");
      Token (Literal "\\\\");
      Token (Literal "when");
      Token (Literal "::");
      Token (Literal "|");
      Token (Literal "=");
      Token (Literal "||");
      Token (Literal "|||");
      Token (Literal "or");
      Token (Literal "&&");
      Token (Literal "&&&");
      Token (Literal "and");
      Token (Literal "==");
      Token (Literal "!=");
      Token (Literal "=~");
      Token (Literal "===");
      Token (Literal "!==");
      Token (Literal "<");
      Token (Literal ">");
      Token (Literal "<=");
      Token (Literal ">=");
      Token (Literal "|>");
      Token (Literal "<<<");
      Token (Literal ">>>");
      Token (Literal "<<~");
      Token (Literal "~>>");
      Token (Literal "<~");
      Token (Literal "~>");
      Token (Literal "<~>");
      Token (Literal "<|>");
      Token (Literal "in");
      Token (Name "not_in");
      Token (Literal "^^");
      Token (Literal "++");
      Token (Literal "--");
      Token (Literal "+++");
      Token (Literal "---");
      Token (Literal "<>");
      Token (Literal "*");
      Token (Literal "/");
      Token (Literal "**");
      Token (Literal "->");
      Token (Literal ".");
    |];
  );
  "quoted_curly",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Token (Name "quoted_content_curly");
      );
      Repeat (
        Seq [
          Token (Name "escape_sequence");
          Opt (
            Token (Name "quoted_content_curly");
          );
        ];
      );
      Token (Literal "}");
    ];
  );
  "quoted_heredoc_double",
  Some (
    Seq [
      Token (Literal "\"\"\"");
      Opt (
        Token (Name "quoted_content_heredoc_double");
      );
      Repeat (
        Seq [
          Token (Name "escape_sequence");
          Opt (
            Token (Name "quoted_content_heredoc_double");
          );
        ];
      );
      Token (Literal "\"\"\"");
    ];
  );
  "quoted_slash",
  Some (
    Seq [
      Token (Literal "/");
      Opt (
        Token (Name "quoted_content_slash");
      );
      Repeat (
        Seq [
          Token (Name "escape_sequence");
          Opt (
            Token (Name "quoted_content_slash");
          );
        ];
      );
      Token (Literal "/");
    ];
  );
  "quoted_parenthesis",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Token (Name "quoted_content_parenthesis");
      );
      Repeat (
        Seq [
          Token (Name "escape_sequence");
          Opt (
            Token (Name "quoted_content_parenthesis");
          );
        ];
      );
      Token (Literal ")");
    ];
  );
  "quoted_square",
  Some (
    Seq [
      Token (Literal "[");
      Opt (
        Token (Name "quoted_content_square");
      );
      Repeat (
        Seq [
          Token (Name "escape_sequence");
          Opt (
            Token (Name "quoted_content_square");
          );
        ];
      );
      Token (Literal "]");
    ];
  );
  "quoted_double",
  Some (
    Seq [
      Token (Literal "\"");
      Opt (
        Token (Name "quoted_content_double");
      );
      Repeat (
        Seq [
          Token (Name "escape_sequence");
          Opt (
            Token (Name "quoted_content_double");
          );
        ];
      );
      Token (Literal "\"");
    ];
  );
  "quoted_single",
  Some (
    Seq [
      Token (Literal "'");
      Opt (
        Token (Name "quoted_content_single");
      );
      Repeat (
        Seq [
          Token (Name "escape_sequence");
          Opt (
            Token (Name "quoted_content_single");
          );
        ];
      );
      Token (Literal "'");
    ];
  );
  "quoted_angle",
  Some (
    Seq [
      Token (Literal "<");
      Opt (
        Token (Name "quoted_content_angle");
      );
      Repeat (
        Seq [
          Token (Name "escape_sequence");
          Opt (
            Token (Name "quoted_content_angle");
          );
        ];
      );
      Token (Literal ">");
    ];
  );
  "quoted_bar",
  Some (
    Seq [
      Token (Literal "|");
      Opt (
        Token (Name "quoted_content_bar");
      );
      Repeat (
        Seq [
          Token (Name "escape_sequence");
          Opt (
            Token (Name "quoted_content_bar");
          );
        ];
      );
      Token (Literal "|");
    ];
  );
  "quoted_heredoc_single",
  Some (
    Seq [
      Token (Literal "'''");
      Opt (
        Token (Name "quoted_content_heredoc_single");
      );
      Repeat (
        Seq [
          Token (Name "escape_sequence");
          Opt (
            Token (Name "quoted_content_heredoc_single");
          );
        ];
      );
      Token (Literal "'''");
    ];
  );
  "access_call",
  Some (
    Seq [
      Token (Name "expression");
      Token (Name "imm_tok_lbrack");
      Token (Name "expression");
      Token (Literal "]");
    ];
  );
  "after_block",
  Some (
    Seq [
      Token (Literal "after");
      Opt (
        Token (Name "terminator");
      );
      Opt (
        Alt [|
          Seq [
            Alt [|
              Token (Name "stab_clause");
            |];
            Repeat (
              Seq [
                Token (Name "terminator");
                Alt [|
                  Token (Name "stab_clause");
                |];
              ];
            );
          ];
          Seq [
            Alt [|
              Token (Name "expression");
            |];
            Repeat (
              Seq [
                Token (Name "terminator");
                Alt [|
                  Token (Name "expression");
                |];
              ];
            );
            Opt (
              Token (Name "terminator");
            );
          ];
        |];
      );
    ];
  );
  "anonymous_call",
  Some (
    Seq [
      Token (Name "anonymous_dot");
      Token (Name "call_arguments_with_parentheses");
    ];
  );
  "anonymous_dot",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal ".");
    ];
  );
  "anonymous_function",
  Some (
    Seq [
      Token (Literal "fn");
      Opt (
        Token (Name "terminator");
      );
      Token (Name "stab_clause");
      Repeat (
        Seq [
          Token (Name "terminator");
          Token (Name "stab_clause");
        ];
      );
      Token (Literal "end");
    ];
  );
  "atom",
  Some (
    Alt [|
      Token (Name "atom_");
      Token (Name "quoted_atom");
    |];
  );
  "binary_operator",
  Some (
    Alt [|
      Seq [
        Token (Name "expression");
        Alt [|
          Token (Literal "<-");
          Token (Literal "\\\\");
        |];
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "when");
        Alt [|
          Token (Name "expression");
          Token (Name "keywords");
        |];
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "::");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "|");
        Alt [|
          Token (Name "expression");
          Token (Name "keywords");
        |];
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "=>");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "=");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Alt [|
          Token (Literal "||");
          Token (Literal "|||");
          Token (Literal "or");
        |];
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Alt [|
          Token (Literal "&&");
          Token (Literal "&&&");
          Token (Literal "and");
        |];
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Alt [|
          Token (Literal "==");
          Token (Literal "!=");
          Token (Literal "=~");
          Token (Literal "===");
          Token (Literal "!==");
        |];
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Alt [|
          Token (Literal "<");
          Token (Literal ">");
          Token (Literal "<=");
          Token (Literal ">=");
        |];
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Alt [|
          Token (Literal "|>");
          Token (Literal "<<<");
          Token (Literal ">>>");
          Token (Literal "<<~");
          Token (Literal "~>>");
          Token (Literal "<~");
          Token (Literal "~>");
          Token (Literal "<~>");
          Token (Literal "<|>");
        |];
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Alt [|
          Token (Literal "in");
          Token (Name "not_in");
        |];
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "^^^");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "//");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Alt [|
          Token (Literal "++");
          Token (Literal "--");
          Token (Literal "+++");
          Token (Literal "---");
          Token (Literal "<>");
        |];
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "..");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Alt [|
          Token (Literal "+");
          Token (Literal "-");
        |];
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Alt [|
          Token (Literal "*");
          Token (Literal "/");
        |];
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "**");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "operator_identifier");
        Token (Literal "/");
        Token (Name "integer");
      ];
    |];
  );
  "bitstring",
  Some (
    Seq [
      Token (Literal "<<");
      Opt (
        Token (Name "items_with_trailing_separator");
      );
      Token (Literal ">>");
    ];
  );
  "block",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Token (Name "terminator");
      );
      Opt (
        Alt [|
          Seq [
            Alt [|
              Token (Name "stab_clause");
            |];
            Repeat (
              Seq [
                Token (Name "terminator");
                Alt [|
                  Token (Name "stab_clause");
                |];
              ];
            );
          ];
          Seq [
            Alt [|
              Token (Name "expression");
            |];
            Repeat (
              Seq [
                Token (Name "terminator");
                Alt [|
                  Token (Name "expression");
                |];
              ];
            );
            Opt (
              Token (Name "terminator");
            );
          ];
        |];
      );
      Token (Literal ")");
    ];
  );
  "body",
  Some (
    Alt [|
      Token (Name "terminator");
      Seq [
        Opt (
          Token (Name "terminator");
        );
        Token (Name "expression");
        Repeat (
          Seq [
            Token (Name "terminator");
            Token (Name "expression");
          ];
        );
        Opt (
          Token (Name "terminator");
        );
      ];
    |];
  );
  "call",
  Some (
    Alt [|
      Token (Name "call_without_parentheses");
      Token (Name "call_with_parentheses");
    |];
  );
  "call_arguments_with_parentheses",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Token (Name "call_arguments_with_trailing_separator");
      );
      Token (Literal ")");
    ];
  );
  "call_arguments_with_parentheses_immediate",
  Some (
    Seq [
      Token (Name "imm_tok_lpar");
      Opt (
        Token (Name "call_arguments_with_trailing_separator");
      );
      Token (Literal ")");
    ];
  );
  "call_arguments_with_trailing_separator",
  Some (
    Alt [|
      Seq [
        Token (Name "expression");
        Repeat (
          Seq [
            Token (Literal ",");
            Token (Name "expression");
          ];
        );
        Opt (
          Seq [
            Token (Literal ",");
            Token (Name "keywords_with_trailing_separator");
          ];
        );
      ];
      Token (Name "keywords_with_trailing_separator");
    |];
  );
  "call_arguments_without_parentheses",
  Some (
    Alt [|
      Seq [
        Token (Name "expression");
        Repeat (
          Seq [
            Token (Literal ",");
            Token (Name "expression");
          ];
        );
        Opt (
          Seq [
            Token (Literal ",");
            Token (Name "keywords");
          ];
        );
      ];
      Token (Name "keywords");
    |];
  );
  "call_with_parentheses",
  Some (
    Alt [|
      Token (Name "local_call_with_parentheses");
      Token (Name "remote_call_with_parentheses");
      Token (Name "anonymous_call");
      Token (Name "double_call");
    |];
  );
  "call_without_parentheses",
  Some (
    Alt [|
      Token (Name "local_call_without_parentheses");
      Token (Name "local_call_just_do_block");
      Token (Name "remote_call_without_parentheses");
    |];
  );
  "capture_expression",
  Some (
    Alt [|
      Seq [
        Token (Literal "(");
        Token (Name "expression");
        Token (Literal ")");
      ];
      Token (Name "expression");
    |];
  );
  "catch_block",
  Some (
    Seq [
      Token (Literal "catch");
      Opt (
        Token (Name "terminator");
      );
      Opt (
        Alt [|
          Seq [
            Alt [|
              Token (Name "stab_clause");
            |];
            Repeat (
              Seq [
                Token (Name "terminator");
                Alt [|
                  Token (Name "stab_clause");
                |];
              ];
            );
          ];
          Seq [
            Alt [|
              Token (Name "expression");
            |];
            Repeat (
              Seq [
                Token (Name "terminator");
                Alt [|
                  Token (Name "expression");
                |];
              ];
            );
            Opt (
              Token (Name "terminator");
            );
          ];
        |];
      );
    ];
  );
  "charlist",
  Some (
    Alt [|
      Token (Name "quoted_i_single");
      Token (Name "quoted_i_heredoc_single");
    |];
  );
  "deep_ellipsis",
  Some (
    Seq [
      Token (Literal "<...");
      Token (Name "expression");
      Token (Literal "...>");
    ];
  );
  "do_block",
  Some (
    Seq [
      Token (Literal "do");
      Opt (
        Token (Name "terminator");
      );
      Opt (
        Alt [|
          Seq [
            Alt [|
              Token (Name "stab_clause");
            |];
            Repeat (
              Seq [
                Token (Name "terminator");
                Alt [|
                  Token (Name "stab_clause");
                |];
              ];
            );
          ];
          Seq [
            Alt [|
              Token (Name "expression");
            |];
            Repeat (
              Seq [
                Token (Name "terminator");
                Alt [|
                  Token (Name "expression");
                |];
              ];
            );
            Opt (
              Token (Name "terminator");
            );
          ];
        |];
      );
      Repeat (
        Alt [|
          Token (Name "after_block");
          Token (Name "rescue_block");
          Token (Name "catch_block");
          Token (Name "else_block");
        |];
      );
      Token (Literal "end");
    ];
  );
  "dot",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal ".");
      Alt [|
        Token (Name "alias");
        Token (Name "tuple");
      |];
    ];
  );
  "double_call",
  Some (
    Seq [
      Alt [|
        Token (Name "local_call_with_parentheses");
        Token (Name "remote_call_with_parentheses");
        Token (Name "anonymous_call");
      |];
      Token (Name "call_arguments_with_parentheses");
      Opt (
        Seq [
          Opt (
            Token (Name "newline_before_do");
          );
          Token (Name "do_block");
        ];
      );
    ];
  );
  "else_block",
  Some (
    Seq [
      Token (Literal "else");
      Opt (
        Token (Name "terminator");
      );
      Opt (
        Alt [|
          Seq [
            Alt [|
              Token (Name "stab_clause");
            |];
            Repeat (
              Seq [
                Token (Name "terminator");
                Alt [|
                  Token (Name "stab_clause");
                |];
              ];
            );
          ];
          Seq [
            Alt [|
              Token (Name "expression");
            |];
            Repeat (
              Seq [
                Token (Name "terminator");
                Alt [|
                  Token (Name "expression");
                |];
              ];
            );
            Opt (
              Token (Name "terminator");
            );
          ];
        |];
      );
    ];
  );
  "expression",
  Some (
    Alt [|
      Token (Name "block");
      Token (Name "identifier");
      Token (Name "alias");
      Token (Name "integer");
      Token (Name "float");
      Token (Name "char");
      Token (Name "boolean");
      Token (Name "nil");
      Token (Name "atom");
      Token (Name "string");
      Token (Name "charlist");
      Token (Name "sigil");
      Token (Name "list");
      Token (Name "tuple");
      Token (Name "bitstring");
      Token (Name "map");
      Token (Name "nullary_operator");
      Token (Name "unary_operator");
      Token (Name "binary_operator");
      Token (Name "dot");
      Token (Name "call");
      Token (Name "access_call");
      Token (Name "anonymous_function");
      Token (Name "deep_ellipsis");
    |];
  );
  "interpolation",
  Some (
    Seq [
      Token (Literal "#{");
      Opt (
        Token (Name "expression");
      );
      Token (Literal "}");
    ];
  );
  "items_with_trailing_separator",
  Some (
    Seq [
      Alt [|
        Seq [
          Token (Name "expression");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "expression");
            ];
          );
          Opt (
            Token (Literal ",");
          );
        ];
        Seq [
          Opt (
            Seq [
              Token (Name "expression");
              Repeat (
                Seq [
                  Token (Literal ",");
                  Token (Name "expression");
                ];
              );
              Token (Literal ",");
            ];
          );
          Token (Name "keywords_with_trailing_separator");
        ];
      |];
    ];
  );
  "keyword",
  Some (
    Alt [|
      Token (Name "keyword_");
      Token (Name "quoted_keyword");
    |];
  );
  "keywords",
  Some (
    Seq [
      Token (Name "pair");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "pair");
        ];
      );
    ];
  );
  "keywords_with_trailing_separator",
  Some (
    Seq [
      Token (Name "pair");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "pair");
        ];
      );
      Opt (
        Token (Literal ",");
      );
    ];
  );
  "list",
  Some (
    Seq [
      Token (Literal "[");
      Opt (
        Token (Name "items_with_trailing_separator");
      );
      Token (Literal "]");
    ];
  );
  "local_call_just_do_block",
  Some (
    Seq [
      Token (Name "identifier");
      Token (Name "do_block");
    ];
  );
  "local_call_with_parentheses",
  Some (
    Seq [
      Token (Name "identifier");
      Token (Name "call_arguments_with_parentheses_immediate");
      Opt (
        Seq [
          Opt (
            Token (Name "newline_before_do");
          );
          Token (Name "do_block");
        ];
      );
    ];
  );
  "local_call_without_parentheses",
  Some (
    Seq [
      Token (Name "identifier");
      Token (Name "call_arguments_without_parentheses");
      Opt (
        Seq [
          Opt (
            Token (Name "newline_before_do");
          );
          Token (Name "do_block");
        ];
      );
    ];
  );
  "map",
  Some (
    Seq [
      Token (Literal "%");
      Opt (
        Token (Name "struct");
      );
      Token (Literal "{");
      Opt (
        Token (Name "items_with_trailing_separator");
      );
      Token (Literal "}");
    ];
  );
  "pair",
  Some (
    Seq [
      Token (Name "keyword");
      Token (Name "expression");
    ];
  );
  "quoted_atom",
  Some (
    Seq [
      Token (Name "quoted_atom_start");
      Alt [|
        Token (Name "quoted_i_double");
        Token (Name "quoted_i_single");
      |];
    ];
  );
  "quoted_i_angle",
  Some (
    Seq [
      Token (Literal "<");
      Opt (
        Token (Name "quoted_content_i_angle");
      );
      Repeat (
        Seq [
          Alt [|
            Token (Name "interpolation");
            Token (Name "escape_sequence");
          |];
          Opt (
            Token (Name "quoted_content_i_angle");
          );
        ];
      );
      Token (Literal ">");
    ];
  );
  "quoted_i_bar",
  Some (
    Seq [
      Token (Literal "|");
      Opt (
        Token (Name "quoted_content_i_bar");
      );
      Repeat (
        Seq [
          Alt [|
            Token (Name "interpolation");
            Token (Name "escape_sequence");
          |];
          Opt (
            Token (Name "quoted_content_i_bar");
          );
        ];
      );
      Token (Literal "|");
    ];
  );
  "quoted_i_curly",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Token (Name "quoted_content_i_curly");
      );
      Repeat (
        Seq [
          Alt [|
            Token (Name "interpolation");
            Token (Name "escape_sequence");
          |];
          Opt (
            Token (Name "quoted_content_i_curly");
          );
        ];
      );
      Token (Literal "}");
    ];
  );
  "quoted_i_double",
  Some (
    Seq [
      Token (Literal "\"");
      Opt (
        Token (Name "quoted_content_i_double");
      );
      Repeat (
        Seq [
          Alt [|
            Token (Name "interpolation");
            Token (Name "escape_sequence");
          |];
          Opt (
            Token (Name "quoted_content_i_double");
          );
        ];
      );
      Token (Literal "\"");
    ];
  );
  "quoted_i_heredoc_double",
  Some (
    Seq [
      Token (Literal "\"\"\"");
      Opt (
        Token (Name "quoted_content_i_heredoc_double");
      );
      Repeat (
        Seq [
          Alt [|
            Token (Name "interpolation");
            Token (Name "escape_sequence");
          |];
          Opt (
            Token (Name "quoted_content_i_heredoc_double");
          );
        ];
      );
      Token (Literal "\"\"\"");
    ];
  );
  "quoted_i_heredoc_single",
  Some (
    Seq [
      Token (Literal "'''");
      Opt (
        Token (Name "quoted_content_i_heredoc_single");
      );
      Repeat (
        Seq [
          Alt [|
            Token (Name "interpolation");
            Token (Name "escape_sequence");
          |];
          Opt (
            Token (Name "quoted_content_i_heredoc_single");
          );
        ];
      );
      Token (Literal "'''");
    ];
  );
  "quoted_i_parenthesis",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Token (Name "quoted_content_i_parenthesis");
      );
      Repeat (
        Seq [
          Alt [|
            Token (Name "interpolation");
            Token (Name "escape_sequence");
          |];
          Opt (
            Token (Name "quoted_content_i_parenthesis");
          );
        ];
      );
      Token (Literal ")");
    ];
  );
  "quoted_i_single",
  Some (
    Seq [
      Token (Literal "'");
      Opt (
        Token (Name "quoted_content_i_single");
      );
      Repeat (
        Seq [
          Alt [|
            Token (Name "interpolation");
            Token (Name "escape_sequence");
          |];
          Opt (
            Token (Name "quoted_content_i_single");
          );
        ];
      );
      Token (Literal "'");
    ];
  );
  "quoted_i_slash",
  Some (
    Seq [
      Token (Literal "/");
      Opt (
        Token (Name "quoted_content_i_slash");
      );
      Repeat (
        Seq [
          Alt [|
            Token (Name "interpolation");
            Token (Name "escape_sequence");
          |];
          Opt (
            Token (Name "quoted_content_i_slash");
          );
        ];
      );
      Token (Literal "/");
    ];
  );
  "quoted_i_square",
  Some (
    Seq [
      Token (Literal "[");
      Opt (
        Token (Name "quoted_content_i_square");
      );
      Repeat (
        Seq [
          Alt [|
            Token (Name "interpolation");
            Token (Name "escape_sequence");
          |];
          Opt (
            Token (Name "quoted_content_i_square");
          );
        ];
      );
      Token (Literal "]");
    ];
  );
  "quoted_keyword",
  Some (
    Seq [
      Alt [|
        Token (Name "quoted_i_double");
        Token (Name "quoted_i_single");
      |];
      Token (Name "imm_tok_pat_5eb9c21");
    ];
  );
  "remote_call_with_parentheses",
  Some (
    Seq [
      Token (Name "remote_dot");
      Token (Name "call_arguments_with_parentheses_immediate");
      Opt (
        Seq [
          Opt (
            Token (Name "newline_before_do");
          );
          Token (Name "do_block");
        ];
      );
    ];
  );
  "remote_call_without_parentheses",
  Some (
    Seq [
      Token (Name "remote_dot");
      Opt (
        Token (Name "call_arguments_without_parentheses");
      );
      Opt (
        Seq [
          Opt (
            Token (Name "newline_before_do");
          );
          Token (Name "do_block");
        ];
      );
    ];
  );
  "remote_dot",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal ".");
      Alt [|
        Token (Name "identifier");
        Alt [|
          Token (Literal "and");
          Token (Literal "in");
          Token (Literal "not");
          Token (Literal "or");
          Token (Literal "when");
          Token (Literal "true");
          Token (Literal "false");
          Token (Literal "nil");
          Token (Literal "after");
          Token (Literal "catch");
          Token (Literal "do");
          Token (Literal "else");
          Token (Literal "end");
          Token (Literal "fn");
          Token (Literal "rescue");
        |];
        Token (Name "operator_identifier");
        Token (Name "quoted_i_double");
        Token (Name "quoted_i_single");
      |];
    ];
  );
  "rescue_block",
  Some (
    Seq [
      Token (Literal "rescue");
      Opt (
        Token (Name "terminator");
      );
      Opt (
        Alt [|
          Seq [
            Alt [|
              Token (Name "stab_clause");
            |];
            Repeat (
              Seq [
                Token (Name "terminator");
                Alt [|
                  Token (Name "stab_clause");
                |];
              ];
            );
          ];
          Seq [
            Alt [|
              Token (Name "expression");
            |];
            Repeat (
              Seq [
                Token (Name "terminator");
                Alt [|
                  Token (Name "expression");
                |];
              ];
            );
            Opt (
              Token (Name "terminator");
            );
          ];
        |];
      );
    ];
  );
  "sigil",
  Some (
    Seq [
      Token (Literal "~");
      Alt [|
        Seq [
          Token (Name "imm_tok_pat_0db2d54");
          Alt [|
            Token (Name "quoted_i_double");
            Token (Name "quoted_i_single");
            Token (Name "quoted_i_heredoc_single");
            Token (Name "quoted_i_heredoc_double");
            Token (Name "quoted_i_parenthesis");
            Token (Name "quoted_i_curly");
            Token (Name "quoted_i_square");
            Token (Name "quoted_i_angle");
            Token (Name "quoted_i_bar");
            Token (Name "quoted_i_slash");
          |];
        ];
        Seq [
          Token (Name "imm_tok_pat_37640cd");
          Alt [|
            Token (Name "quoted_double");
            Token (Name "quoted_single");
            Token (Name "quoted_heredoc_single");
            Token (Name "quoted_heredoc_double");
            Token (Name "quoted_parenthesis");
            Token (Name "quoted_curly");
            Token (Name "quoted_square");
            Token (Name "quoted_angle");
            Token (Name "quoted_bar");
            Token (Name "quoted_slash");
          |];
        ];
      |];
      Opt (
        Token (Name "imm_tok_pat_8f9e87e");
      );
    ];
  );
  "stab_clause",
  Some (
    Seq [
      Opt (
        Token (Name "stab_clause_left");
      );
      Token (Literal "->");
      Opt (
        Token (Name "body");
      );
    ];
  );
  "stab_clause_arguments_with_parentheses",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Alt [|
          Seq [
            Token (Name "expression");
            Repeat (
              Seq [
                Token (Literal ",");
                Token (Name "expression");
              ];
            );
            Opt (
              Seq [
                Token (Literal ",");
                Token (Name "keywords");
              ];
            );
          ];
          Token (Name "keywords");
        |];
      );
      Token (Literal ")");
    ];
  );
  "stab_clause_arguments_with_parentheses_with_guard",
  Some (
    Seq [
      Token (Name "stab_clause_arguments_with_parentheses");
      Token (Literal "when");
      Token (Name "expression");
    ];
  );
  "stab_clause_arguments_without_parentheses",
  Some (
    Alt [|
      Seq [
        Token (Name "expression");
        Repeat (
          Seq [
            Token (Literal ",");
            Token (Name "expression");
          ];
        );
        Opt (
          Seq [
            Token (Literal ",");
            Token (Name "keywords");
          ];
        );
      ];
      Token (Name "keywords");
    |];
  );
  "stab_clause_arguments_without_parentheses_with_guard",
  Some (
    Seq [
      Token (Name "stab_clause_arguments_without_parentheses");
      Token (Literal "when");
      Token (Name "expression");
    ];
  );
  "stab_clause_left",
  Some (
    Alt [|
      Token (Name "stab_clause_arguments_with_parentheses");
      Token (Name "stab_clause_arguments_with_parentheses_with_guard");
      Token (Name "stab_clause_arguments_without_parentheses");
      Token (Name "stab_clause_arguments_without_parentheses_with_guard");
    |];
  );
  "string",
  Some (
    Alt [|
      Token (Name "quoted_i_double");
      Token (Name "quoted_i_heredoc_double");
    |];
  );
  "struct",
  Some (
    Alt [|
      Token (Name "alias");
      Token (Name "atom");
      Token (Name "identifier");
      Token (Name "unary_operator");
      Token (Name "dot");
      Token (Name "call_with_parentheses");
    |];
  );
  "tuple",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Token (Name "items_with_trailing_separator");
      );
      Token (Literal "}");
    ];
  );
  "unary_operator",
  Some (
    Alt [|
      Seq [
        Opt (
          Token (Name "before_unary_op");
        );
        Token (Literal "&");
        Token (Name "capture_expression");
      ];
      Seq [
        Opt (
          Token (Name "before_unary_op");
        );
        Alt [|
          Token (Literal "+");
          Token (Literal "-");
          Token (Literal "!");
          Token (Literal "^");
          Token (Literal "~~~");
          Token (Literal "not");
        |];
        Token (Name "expression");
      ];
      Seq [
        Opt (
          Token (Name "before_unary_op");
        );
        Token (Literal "@");
        Token (Name "expression");
      ];
      Seq [
        Opt (
          Token (Name "before_unary_op");
        );
        Token (Literal "&");
        Token (Name "integer");
      ];
    |];
  );
  "source",
  Some (
    Seq [
      Opt (
        Token (Name "terminator");
      );
      Opt (
        Seq [
          Token (Name "expression");
          Repeat (
            Seq [
              Token (Name "terminator");
              Token (Name "expression");
            ];
          );
          Opt (
            Token (Name "terminator");
          );
        ];
      );
    ];
  );
]


let trans_pat_509ec78 ((kind, body) : mt) : CST.pat_509ec78 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_quoted_content_square ((kind, body) : mt) : CST.quoted_content_square =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_boolean ((kind, body) : mt) : CST.boolean =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `True (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `False (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_quoted_content_angle ((kind, body) : mt) : CST.quoted_content_angle =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_pat_5eb9c21 ((kind, body) : mt) : CST.imm_tok_pat_5eb9c21 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_pat_8f9e87e ((kind, body) : mt) : CST.imm_tok_pat_8f9e87e =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_quoted_content_bar ((kind, body) : mt) : CST.quoted_content_bar =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_pat_0db2d54 ((kind, body) : mt) : CST.imm_tok_pat_0db2d54 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_float_ ((kind, body) : mt) : CST.float_ =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_quoted_content_i_square ((kind, body) : mt) : CST.quoted_content_i_square =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_alias ((kind, body) : mt) : CST.alias =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_nullary_operator ((kind, body) : mt) : CST.nullary_operator =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_before_unary_op ((kind, body) : mt) : CST.before_unary_op =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_integer ((kind, body) : mt) : CST.integer =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_nil ((kind, body) : mt) : CST.nil =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_quoted_content_i_angle ((kind, body) : mt) : CST.quoted_content_i_angle =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_cf9c6c3 ((kind, body) : mt) : CST.pat_cf9c6c3 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_lpar ((kind, body) : mt) : CST.imm_tok_lpar =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_pat_37640cd ((kind, body) : mt) : CST.imm_tok_pat_37640cd =
  match body with
  | Leaf v -> v
  | Children _ -> assert false


let trans_quoted_content_curly ((kind, body) : mt) : CST.quoted_content_curly =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_keyword_ ((kind, body) : mt) : CST.keyword_ =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_quoted_content_i_heredoc_double ((kind, body) : mt) : CST.quoted_content_i_heredoc_double =
  match body with
  | Leaf v -> v
  | Children _ -> assert false


let trans_quoted_content_i_curly ((kind, body) : mt) : CST.quoted_content_i_curly =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_semgrep_metavariable ((kind, body) : mt) : CST.semgrep_metavariable =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_quoted_content_heredoc_double ((kind, body) : mt) : CST.quoted_content_heredoc_double =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_quoted_content_slash ((kind, body) : mt) : CST.quoted_content_slash =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_not_in ((kind, body) : mt) : CST.not_in =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_quoted_atom_start ((kind, body) : mt) : CST.quoted_atom_start =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_quoted_content_single ((kind, body) : mt) : CST.quoted_content_single =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_quoted_content_i_slash ((kind, body) : mt) : CST.quoted_content_i_slash =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_char ((kind, body) : mt) : CST.char =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_quoted_content_double ((kind, body) : mt) : CST.quoted_content_double =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_quoted_content_i_bar ((kind, body) : mt) : CST.quoted_content_i_bar =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_quoted_content_i_heredoc_single ((kind, body) : mt) : CST.quoted_content_i_heredoc_single =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_lbrack ((kind, body) : mt) : CST.imm_tok_lbrack =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_quoted_content_i_parenthesis ((kind, body) : mt) : CST.quoted_content_i_parenthesis =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_quoted_content_parenthesis ((kind, body) : mt) : CST.quoted_content_parenthesis =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_quoted_content_i_double ((kind, body) : mt) : CST.quoted_content_i_double =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_escape_sequence ((kind, body) : mt) : CST.escape_sequence =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_quoted_content_heredoc_single ((kind, body) : mt) : CST.quoted_content_heredoc_single =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_quoted_content_i_single ((kind, body) : mt) : CST.quoted_content_i_single =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_atom_ ((kind, body) : mt) : CST.atom_ =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_newline_before_do ((kind, body) : mt) : CST.newline_before_do =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_terminator ((kind, body) : mt) : CST.terminator =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Rep_pat_509ec78_SEMI (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.repeat
                    (fun v -> trans_pat_509ec78 (Run.matcher_token v))
                    v0
                  ,
                  Run.trans_token (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Rep1_pat_509ec78 (
            Run.repeat1
              (fun v -> trans_pat_509ec78 (Run.matcher_token v))
              v
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_identifier ((kind, body) : mt) : CST.identifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_pat_cf9c6c3 (
            (match v with
            | Alt (0, v) ->
                `Pat_cf9c6c3 (
                  trans_pat_cf9c6c3 (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `DOTDOTDOT (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Semg_meta (
            trans_semgrep_metavariable (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_operator_identifier ((kind, body) : mt) : CST.operator_identifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `AMP (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Choice_PLUS (
            (match v with
            | Alt (0, v) ->
                `PLUS (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `DASH (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `BANG (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `HAT (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `TILDETILDETILDE (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Not (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `AT (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `LTDASH (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `BSLASHBSLASH (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `When (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `COLONCOLON (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `BAR (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `EQ (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `BARBAR (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `BARBARBAR (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (11, v) ->
          `Or (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (12, v) ->
          `AMPAMP (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (13, v) ->
          `AMPAMPAMP (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (14, v) ->
          `And (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (15, v) ->
          `EQEQ (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (16, v) ->
          `BANGEQ (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (17, v) ->
          `EQTILDE (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (18, v) ->
          `EQEQEQ (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (19, v) ->
          `BANGEQEQ (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (20, v) ->
          `LT (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (21, v) ->
          `GT (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (22, v) ->
          `LTEQ (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (23, v) ->
          `GTEQ (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (24, v) ->
          `BARGT (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (25, v) ->
          `LTLTLT (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (26, v) ->
          `GTGTGT (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (27, v) ->
          `LTLTTILDE (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (28, v) ->
          `TILDEGTGT (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (29, v) ->
          `LTTILDE (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (30, v) ->
          `TILDEGT (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (31, v) ->
          `LTTILDEGT (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (32, v) ->
          `LTBARGT (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (33, v) ->
          `In (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (34, v) ->
          `Not_in (
            trans_not_in (Run.matcher_token v)
          )
      | Alt (35, v) ->
          `HATHAT (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (36, v) ->
          `PLUSPLUS (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (37, v) ->
          `DASHDASH (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (38, v) ->
          `PLUSPLUSPLUS (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (39, v) ->
          `DASHDASHDASH (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (40, v) ->
          `LTGT (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (41, v) ->
          `STAR (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (42, v) ->
          `SLASH (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (43, v) ->
          `STARSTAR (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (44, v) ->
          `DASHGT (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (45, v) ->
          `DOT (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_quoted_curly ((kind, body) : mt) : CST.quoted_curly =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_quoted_content_curly (Run.matcher_token v))
              v1
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_escape_sequence (Run.matcher_token v0),
                      Run.opt
                        (fun v -> trans_quoted_content_curly (Run.matcher_token v))
                        v1
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_quoted_heredoc_double ((kind, body) : mt) : CST.quoted_heredoc_double =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                trans_quoted_content_heredoc_double (Run.matcher_token v)
              )
              v1
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_escape_sequence (Run.matcher_token v0),
                      Run.opt
                        (fun v ->
                          trans_quoted_content_heredoc_double (Run.matcher_token v)
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_quoted_slash ((kind, body) : mt) : CST.quoted_slash =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_quoted_content_slash (Run.matcher_token v))
              v1
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_escape_sequence (Run.matcher_token v0),
                      Run.opt
                        (fun v -> trans_quoted_content_slash (Run.matcher_token v))
                        v1
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_quoted_parenthesis ((kind, body) : mt) : CST.quoted_parenthesis =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                trans_quoted_content_parenthesis (Run.matcher_token v)
              )
              v1
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_escape_sequence (Run.matcher_token v0),
                      Run.opt
                        (fun v ->
                          trans_quoted_content_parenthesis (Run.matcher_token v)
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_quoted_square ((kind, body) : mt) : CST.quoted_square =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_quoted_content_square (Run.matcher_token v))
              v1
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_escape_sequence (Run.matcher_token v0),
                      Run.opt
                        (fun v -> trans_quoted_content_square (Run.matcher_token v))
                        v1
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_quoted_double ((kind, body) : mt) : CST.quoted_double =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_quoted_content_double (Run.matcher_token v))
              v1
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_escape_sequence (Run.matcher_token v0),
                      Run.opt
                        (fun v -> trans_quoted_content_double (Run.matcher_token v))
                        v1
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_quoted_single ((kind, body) : mt) : CST.quoted_single =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_quoted_content_single (Run.matcher_token v))
              v1
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_escape_sequence (Run.matcher_token v0),
                      Run.opt
                        (fun v -> trans_quoted_content_single (Run.matcher_token v))
                        v1
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_quoted_angle ((kind, body) : mt) : CST.quoted_angle =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_quoted_content_angle (Run.matcher_token v))
              v1
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_escape_sequence (Run.matcher_token v0),
                      Run.opt
                        (fun v -> trans_quoted_content_angle (Run.matcher_token v))
                        v1
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_quoted_bar ((kind, body) : mt) : CST.quoted_bar =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_quoted_content_bar (Run.matcher_token v))
              v1
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_escape_sequence (Run.matcher_token v0),
                      Run.opt
                        (fun v -> trans_quoted_content_bar (Run.matcher_token v))
                        v1
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_quoted_heredoc_single ((kind, body) : mt) : CST.quoted_heredoc_single =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                trans_quoted_content_heredoc_single (Run.matcher_token v)
              )
              v1
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_escape_sequence (Run.matcher_token v0),
                      Run.opt
                        (fun v ->
                          trans_quoted_content_heredoc_single (Run.matcher_token v)
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_access_call ((kind, body) : mt) : CST.access_call =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_expression (Run.matcher_token v0),
            trans_imm_tok_lbrack (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_after_block ((kind, body) : mt) : CST.after_block =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_terminator (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Choice_stab_clause_rep_term_choice_stab_clause (
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            (match v0 with
                            | Alt (0, v) ->
                                `Stab_clause (
                                  trans_stab_clause (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                            ,
                            Run.repeat
                              (fun v ->
                                (match v with
                                | Seq [v0; v1] ->
                                    (
                                      trans_terminator (Run.matcher_token v0),
                                      (match v1 with
                                      | Alt (0, v) ->
                                          `Stab_clause (
                                            trans_stab_clause (Run.matcher_token v)
                                          )
                                      | _ -> assert false
                                      )
                                    )
                                | _ -> assert false
                                )
                              )
                              v1
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `Choice_exp_rep_term_choice_exp_opt_term (
                      (match v with
                      | Seq [v0; v1; v2] ->
                          (
                            (match v0 with
                            | Alt (0, v) ->
                                `Exp (
                                  trans_expression (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                            ,
                            Run.repeat
                              (fun v ->
                                (match v with
                                | Seq [v0; v1] ->
                                    (
                                      trans_terminator (Run.matcher_token v0),
                                      (match v1 with
                                      | Alt (0, v) ->
                                          `Exp (
                                            trans_expression (Run.matcher_token v)
                                          )
                                      | _ -> assert false
                                      )
                                    )
                                | _ -> assert false
                                )
                              )
                              v1
                            ,
                            Run.opt
                              (fun v -> trans_terminator (Run.matcher_token v))
                              v2
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_anonymous_call ((kind, body) : mt) : CST.anonymous_call =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_anonymous_dot (Run.matcher_token v0),
            trans_call_arguments_with_parentheses (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_anonymous_dot ((kind, body) : mt) : CST.anonymous_dot =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_anonymous_function ((kind, body) : mt) : CST.anonymous_function =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_terminator (Run.matcher_token v))
              v1
            ,
            trans_stab_clause (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_terminator (Run.matcher_token v0),
                      trans_stab_clause (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_atom ((kind, body) : mt) : CST.atom =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Atom_ (
            trans_atom_ (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Quoted_atom (
            trans_quoted_atom (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_binary_operator ((kind, body) : mt) : CST.binary_operator =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Exp_choice_LTDASH_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `LTDASH (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `BSLASHBSLASH (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Exp_when_choice_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  (match v2 with
                  | Alt (0, v) ->
                      `Exp (
                        trans_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Keywos (
                        trans_keywords (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Exp_COLONCOLON_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (3, v) ->
          `Exp_BAR_choice_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  (match v2 with
                  | Alt (0, v) ->
                      `Exp (
                        trans_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Keywos (
                        trans_keywords (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (4, v) ->
          `Exp_EQGT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (5, v) ->
          `Exp_EQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (6, v) ->
          `Exp_choice_BARBAR_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `BARBAR (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `BARBARBAR (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Or (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (7, v) ->
          `Exp_choice_AMPAMP_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `AMPAMP (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `AMPAMPAMP (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `And (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (8, v) ->
          `Exp_choice_EQEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `EQEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `BANGEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `EQTILDE (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `EQEQEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `BANGEQEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (9, v) ->
          `Exp_choice_LT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `LT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `GT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `LTEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `GTEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (10, v) ->
          `Exp_choice_BARGT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `BARGT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `LTLTLT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `GTGTGT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `LTLTTILDE (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `TILDEGTGT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `LTTILDE (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `TILDEGT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `LTTILDEGT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (8, v) ->
                      `LTBARGT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (11, v) ->
          `Exp_choice_in_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `In (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Not_in (
                        trans_not_in (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (12, v) ->
          `Exp_HATHATHAT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (13, v) ->
          `Exp_SLASHSLASH_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (14, v) ->
          `Exp_choice_PLUSPLUS_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `PLUSPLUS (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `DASHDASH (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `PLUSPLUSPLUS (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `DASHDASHDASH (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `LTGT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (15, v) ->
          `Exp_DOTDOT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (16, v) ->
          `Exp_choice_PLUS_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `PLUS (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `DASH (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (17, v) ->
          `Exp_choice_STAR_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `STAR (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `SLASH (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (18, v) ->
          `Exp_STARSTAR_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (19, v) ->
          `Op_id_SLASH_int (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_operator_identifier (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_integer (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_bitstring ((kind, body) : mt) : CST.bitstring =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                trans_items_with_trailing_separator (Run.matcher_token v)
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_block ((kind, body) : mt) : CST.block =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_terminator (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Choice_stab_clause_rep_term_choice_stab_clause (
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            (match v0 with
                            | Alt (0, v) ->
                                `Stab_clause (
                                  trans_stab_clause (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                            ,
                            Run.repeat
                              (fun v ->
                                (match v with
                                | Seq [v0; v1] ->
                                    (
                                      trans_terminator (Run.matcher_token v0),
                                      (match v1 with
                                      | Alt (0, v) ->
                                          `Stab_clause (
                                            trans_stab_clause (Run.matcher_token v)
                                          )
                                      | _ -> assert false
                                      )
                                    )
                                | _ -> assert false
                                )
                              )
                              v1
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `Choice_exp_rep_term_choice_exp_opt_term (
                      (match v with
                      | Seq [v0; v1; v2] ->
                          (
                            (match v0 with
                            | Alt (0, v) ->
                                `Exp (
                                  trans_expression (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                            ,
                            Run.repeat
                              (fun v ->
                                (match v with
                                | Seq [v0; v1] ->
                                    (
                                      trans_terminator (Run.matcher_token v0),
                                      (match v1 with
                                      | Alt (0, v) ->
                                          `Exp (
                                            trans_expression (Run.matcher_token v)
                                          )
                                      | _ -> assert false
                                      )
                                    )
                                | _ -> assert false
                                )
                              )
                              v1
                            ,
                            Run.opt
                              (fun v -> trans_terminator (Run.matcher_token v))
                              v2
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_body ((kind, body) : mt) : CST.body =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Term (
            trans_terminator (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Opt_term_exp_rep_term_exp_opt_term (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  Run.opt
                    (fun v -> trans_terminator (Run.matcher_token v))
                    v0
                  ,
                  trans_expression (Run.matcher_token v1),
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            trans_terminator (Run.matcher_token v0),
                            trans_expression (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                    v2
                  ,
                  Run.opt
                    (fun v -> trans_terminator (Run.matcher_token v))
                    v3
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_call ((kind, body) : mt) : CST.call =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Call_with_parens_b98484c (
            trans_call_without_parentheses (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Call_with_parens_403315d (
            trans_call_with_parentheses (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_call_arguments_with_parentheses ((kind, body) : mt) : CST.call_arguments_with_parentheses =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                trans_call_arguments_with_trailing_separator (Run.matcher_token v)
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_call_arguments_with_parentheses_immediate ((kind, body) : mt) : CST.call_arguments_with_parentheses_immediate =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_imm_tok_lpar (Run.matcher_token v0),
            Run.opt
              (fun v ->
                trans_call_arguments_with_trailing_separator (Run.matcher_token v)
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_call_arguments_with_trailing_separator ((kind, body) : mt) : CST.call_arguments_with_trailing_separator =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Exp_rep_COMMA_exp_opt_COMMA_keywos_with_trai_sepa (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            Run.trans_token (Run.matcher_token v0),
                            trans_expression (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                  ,
                  Run.opt
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            Run.trans_token (Run.matcher_token v0),
                            trans_keywords_with_trailing_separator (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                    v2
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Keywos_with_trai_sepa (
            trans_keywords_with_trailing_separator (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_call_arguments_without_parentheses ((kind, body) : mt) : CST.call_arguments_without_parentheses =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Exp_rep_COMMA_exp_opt_COMMA_keywos (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            Run.trans_token (Run.matcher_token v0),
                            trans_expression (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                  ,
                  Run.opt
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            Run.trans_token (Run.matcher_token v0),
                            trans_keywords (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                    v2
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Keywos (
            trans_keywords (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_call_with_parentheses ((kind, body) : mt) : CST.call_with_parentheses =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Local_call_with_parens (
            trans_local_call_with_parentheses (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Remote_call_with_parens (
            trans_remote_call_with_parentheses (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Anon_call (
            trans_anonymous_call (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Double_call (
            trans_double_call (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_call_without_parentheses ((kind, body) : mt) : CST.call_without_parentheses =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Local_call_with_parens (
            trans_local_call_without_parentheses (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Local_call_just_do_blk (
            trans_local_call_just_do_block (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Remote_call_with_parens (
            trans_remote_call_without_parentheses (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_capture_expression ((kind, body) : mt) : CST.capture_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `LPAR_exp_RPAR (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_expression (Run.matcher_token v1),
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Exp (
            trans_expression (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_catch_block ((kind, body) : mt) : CST.catch_block =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_terminator (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Choice_stab_clause_rep_term_choice_stab_clause (
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            (match v0 with
                            | Alt (0, v) ->
                                `Stab_clause (
                                  trans_stab_clause (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                            ,
                            Run.repeat
                              (fun v ->
                                (match v with
                                | Seq [v0; v1] ->
                                    (
                                      trans_terminator (Run.matcher_token v0),
                                      (match v1 with
                                      | Alt (0, v) ->
                                          `Stab_clause (
                                            trans_stab_clause (Run.matcher_token v)
                                          )
                                      | _ -> assert false
                                      )
                                    )
                                | _ -> assert false
                                )
                              )
                              v1
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `Choice_exp_rep_term_choice_exp_opt_term (
                      (match v with
                      | Seq [v0; v1; v2] ->
                          (
                            (match v0 with
                            | Alt (0, v) ->
                                `Exp (
                                  trans_expression (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                            ,
                            Run.repeat
                              (fun v ->
                                (match v with
                                | Seq [v0; v1] ->
                                    (
                                      trans_terminator (Run.matcher_token v0),
                                      (match v1 with
                                      | Alt (0, v) ->
                                          `Exp (
                                            trans_expression (Run.matcher_token v)
                                          )
                                      | _ -> assert false
                                      )
                                    )
                                | _ -> assert false
                                )
                              )
                              v1
                            ,
                            Run.opt
                              (fun v -> trans_terminator (Run.matcher_token v))
                              v2
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_charlist ((kind, body) : mt) : CST.charlist =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Quoted_i_single (
            trans_quoted_i_single (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Quoted_i_here_single (
            trans_quoted_i_heredoc_single (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_deep_ellipsis ((kind, body) : mt) : CST.deep_ellipsis =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_do_block ((kind, body) : mt) : CST.do_block =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_terminator (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Choice_stab_clause_rep_term_choice_stab_clause (
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            (match v0 with
                            | Alt (0, v) ->
                                `Stab_clause (
                                  trans_stab_clause (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                            ,
                            Run.repeat
                              (fun v ->
                                (match v with
                                | Seq [v0; v1] ->
                                    (
                                      trans_terminator (Run.matcher_token v0),
                                      (match v1 with
                                      | Alt (0, v) ->
                                          `Stab_clause (
                                            trans_stab_clause (Run.matcher_token v)
                                          )
                                      | _ -> assert false
                                      )
                                    )
                                | _ -> assert false
                                )
                              )
                              v1
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `Choice_exp_rep_term_choice_exp_opt_term (
                      (match v with
                      | Seq [v0; v1; v2] ->
                          (
                            (match v0 with
                            | Alt (0, v) ->
                                `Exp (
                                  trans_expression (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                            ,
                            Run.repeat
                              (fun v ->
                                (match v with
                                | Seq [v0; v1] ->
                                    (
                                      trans_terminator (Run.matcher_token v0),
                                      (match v1 with
                                      | Alt (0, v) ->
                                          `Exp (
                                            trans_expression (Run.matcher_token v)
                                          )
                                      | _ -> assert false
                                      )
                                    )
                                | _ -> assert false
                                )
                              )
                              v1
                            ,
                            Run.opt
                              (fun v -> trans_terminator (Run.matcher_token v))
                              v2
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `After_blk (
                      trans_after_block (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Rescue_blk (
                      trans_rescue_block (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Catch_blk (
                      trans_catch_block (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Else_blk (
                      trans_else_block (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_dot ((kind, body) : mt) : CST.dot =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Alias (
                  trans_alias (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Tuple (
                  trans_tuple (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_double_call ((kind, body) : mt) : CST.double_call =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Local_call_with_parens (
                  trans_local_call_with_parentheses (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Remote_call_with_parens (
                  trans_remote_call_with_parentheses (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Anon_call (
                  trans_anonymous_call (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_call_arguments_with_parentheses (Run.matcher_token v1)
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.opt
                        (fun v -> trans_newline_before_do (Run.matcher_token v))
                        v0
                      ,
                      trans_do_block (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_else_block ((kind, body) : mt) : CST.else_block =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_terminator (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Choice_stab_clause_rep_term_choice_stab_clause (
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            (match v0 with
                            | Alt (0, v) ->
                                `Stab_clause (
                                  trans_stab_clause (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                            ,
                            Run.repeat
                              (fun v ->
                                (match v with
                                | Seq [v0; v1] ->
                                    (
                                      trans_terminator (Run.matcher_token v0),
                                      (match v1 with
                                      | Alt (0, v) ->
                                          `Stab_clause (
                                            trans_stab_clause (Run.matcher_token v)
                                          )
                                      | _ -> assert false
                                      )
                                    )
                                | _ -> assert false
                                )
                              )
                              v1
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `Choice_exp_rep_term_choice_exp_opt_term (
                      (match v with
                      | Seq [v0; v1; v2] ->
                          (
                            (match v0 with
                            | Alt (0, v) ->
                                `Exp (
                                  trans_expression (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                            ,
                            Run.repeat
                              (fun v ->
                                (match v with
                                | Seq [v0; v1] ->
                                    (
                                      trans_terminator (Run.matcher_token v0),
                                      (match v1 with
                                      | Alt (0, v) ->
                                          `Exp (
                                            trans_expression (Run.matcher_token v)
                                          )
                                      | _ -> assert false
                                      )
                                    )
                                | _ -> assert false
                                )
                              )
                              v1
                            ,
                            Run.opt
                              (fun v -> trans_terminator (Run.matcher_token v))
                              v2
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_expression ((kind, body) : mt) : CST.expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Blk (
            trans_block (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Alias (
            trans_alias (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Int (
            trans_integer (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Float (
            trans_float_ (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Char_a87deb0 (
            trans_char (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Bool (
            trans_boolean (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Nil (
            trans_nil (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Atom (
            trans_atom (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Str (
            trans_string_ (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `Char_a593f90 (
            trans_charlist (Run.matcher_token v)
          )
      | Alt (11, v) ->
          `Sigil (
            trans_sigil (Run.matcher_token v)
          )
      | Alt (12, v) ->
          `List (
            trans_list_ (Run.matcher_token v)
          )
      | Alt (13, v) ->
          `Tuple (
            trans_tuple (Run.matcher_token v)
          )
      | Alt (14, v) ->
          `Bits (
            trans_bitstring (Run.matcher_token v)
          )
      | Alt (15, v) ->
          `Map (
            trans_map (Run.matcher_token v)
          )
      | Alt (16, v) ->
          `Null_op (
            trans_nullary_operator (Run.matcher_token v)
          )
      | Alt (17, v) ->
          `Un_op (
            trans_unary_operator (Run.matcher_token v)
          )
      | Alt (18, v) ->
          `Bin_op (
            trans_binary_operator (Run.matcher_token v)
          )
      | Alt (19, v) ->
          `Dot (
            trans_dot (Run.matcher_token v)
          )
      | Alt (20, v) ->
          `Call (
            trans_call (Run.matcher_token v)
          )
      | Alt (21, v) ->
          `Access_call (
            trans_access_call (Run.matcher_token v)
          )
      | Alt (22, v) ->
          `Anon_func (
            trans_anonymous_function (Run.matcher_token v)
          )
      | Alt (23, v) ->
          `Deep_ellips (
            trans_deep_ellipsis (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_interpolation ((kind, body) : mt) : CST.interpolation =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_expression (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_items_with_trailing_separator ((kind, body) : mt) : CST.items_with_trailing_separator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Exp_rep_COMMA_exp_opt_COMMA (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        trans_expression (Run.matcher_token v0),
                        Run.repeat
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  Run.trans_token (Run.matcher_token v0),
                                  trans_expression (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                          v1
                        ,
                        Run.opt
                          (fun v -> Run.trans_token (Run.matcher_token v))
                          v2
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Opt_exp_rep_COMMA_exp_COMMA_keywos_with_trai_sepa (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        Run.opt
                          (fun v ->
                            (match v with
                            | Seq [v0; v1; v2] ->
                                (
                                  trans_expression (Run.matcher_token v0),
                                  Run.repeat
                                    (fun v ->
                                      (match v with
                                      | Seq [v0; v1] ->
                                          (
                                            Run.trans_token (Run.matcher_token v0),
                                            trans_expression (Run.matcher_token v1)
                                          )
                                      | _ -> assert false
                                      )
                                    )
                                    v1
                                  ,
                                  Run.trans_token (Run.matcher_token v2)
                                )
                            | _ -> assert false
                            )
                          )
                          v0
                        ,
                        trans_keywords_with_trailing_separator (Run.matcher_token v1)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_keyword ((kind, body) : mt) : CST.keyword =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Kw_ (
            trans_keyword_ (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Quoted_kw (
            trans_quoted_keyword (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_keywords ((kind, body) : mt) : CST.keywords =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pair (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_pair (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_keywords_with_trailing_separator ((kind, body) : mt) : CST.keywords_with_trailing_separator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pair (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_pair (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_list_ ((kind, body) : mt) : CST.list_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                trans_items_with_trailing_separator (Run.matcher_token v)
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_local_call_just_do_block ((kind, body) : mt) : CST.local_call_just_do_block =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_identifier (Run.matcher_token v0),
            trans_do_block (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_local_call_with_parentheses ((kind, body) : mt) : CST.local_call_with_parentheses =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_identifier (Run.matcher_token v0),
            trans_call_arguments_with_parentheses_immediate (Run.matcher_token v1)
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.opt
                        (fun v -> trans_newline_before_do (Run.matcher_token v))
                        v0
                      ,
                      trans_do_block (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_local_call_without_parentheses ((kind, body) : mt) : CST.local_call_without_parentheses =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_identifier (Run.matcher_token v0),
            trans_call_arguments_without_parentheses (Run.matcher_token v1)
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.opt
                        (fun v -> trans_newline_before_do (Run.matcher_token v))
                        v0
                      ,
                      trans_do_block (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_map ((kind, body) : mt) : CST.map =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_struct_ (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2),
            Run.opt
              (fun v ->
                trans_items_with_trailing_separator (Run.matcher_token v)
              )
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_pair ((kind, body) : mt) : CST.pair =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_keyword (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_quoted_atom ((kind, body) : mt) : CST.quoted_atom =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_quoted_atom_start (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Quoted_i_double (
                  trans_quoted_i_double (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Quoted_i_single (
                  trans_quoted_i_single (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_quoted_i_angle ((kind, body) : mt) : CST.quoted_i_angle =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                trans_quoted_content_i_angle (Run.matcher_token v)
              )
              v1
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Interp (
                            trans_interpolation (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Esc_seq (
                            trans_escape_sequence (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.opt
                        (fun v ->
                          trans_quoted_content_i_angle (Run.matcher_token v)
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_quoted_i_bar ((kind, body) : mt) : CST.quoted_i_bar =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_quoted_content_i_bar (Run.matcher_token v))
              v1
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Interp (
                            trans_interpolation (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Esc_seq (
                            trans_escape_sequence (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.opt
                        (fun v -> trans_quoted_content_i_bar (Run.matcher_token v))
                        v1
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_quoted_i_curly ((kind, body) : mt) : CST.quoted_i_curly =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                trans_quoted_content_i_curly (Run.matcher_token v)
              )
              v1
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Interp (
                            trans_interpolation (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Esc_seq (
                            trans_escape_sequence (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.opt
                        (fun v ->
                          trans_quoted_content_i_curly (Run.matcher_token v)
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_quoted_i_double ((kind, body) : mt) : CST.quoted_i_double =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                trans_quoted_content_i_double (Run.matcher_token v)
              )
              v1
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Interp (
                            trans_interpolation (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Esc_seq (
                            trans_escape_sequence (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.opt
                        (fun v ->
                          trans_quoted_content_i_double (Run.matcher_token v)
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_quoted_i_heredoc_double ((kind, body) : mt) : CST.quoted_i_heredoc_double =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                trans_quoted_content_i_heredoc_double (Run.matcher_token v)
              )
              v1
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Interp (
                            trans_interpolation (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Esc_seq (
                            trans_escape_sequence (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.opt
                        (fun v ->
                          trans_quoted_content_i_heredoc_double (Run.matcher_token v)
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_quoted_i_heredoc_single ((kind, body) : mt) : CST.quoted_i_heredoc_single =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                trans_quoted_content_i_heredoc_single (Run.matcher_token v)
              )
              v1
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Interp (
                            trans_interpolation (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Esc_seq (
                            trans_escape_sequence (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.opt
                        (fun v ->
                          trans_quoted_content_i_heredoc_single (Run.matcher_token v)
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_quoted_i_parenthesis ((kind, body) : mt) : CST.quoted_i_parenthesis =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                trans_quoted_content_i_parenthesis (Run.matcher_token v)
              )
              v1
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Interp (
                            trans_interpolation (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Esc_seq (
                            trans_escape_sequence (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.opt
                        (fun v ->
                          trans_quoted_content_i_parenthesis (Run.matcher_token v)
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_quoted_i_single ((kind, body) : mt) : CST.quoted_i_single =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                trans_quoted_content_i_single (Run.matcher_token v)
              )
              v1
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Interp (
                            trans_interpolation (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Esc_seq (
                            trans_escape_sequence (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.opt
                        (fun v ->
                          trans_quoted_content_i_single (Run.matcher_token v)
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_quoted_i_slash ((kind, body) : mt) : CST.quoted_i_slash =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                trans_quoted_content_i_slash (Run.matcher_token v)
              )
              v1
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Interp (
                            trans_interpolation (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Esc_seq (
                            trans_escape_sequence (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.opt
                        (fun v ->
                          trans_quoted_content_i_slash (Run.matcher_token v)
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_quoted_i_square ((kind, body) : mt) : CST.quoted_i_square =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                trans_quoted_content_i_square (Run.matcher_token v)
              )
              v1
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Interp (
                            trans_interpolation (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Esc_seq (
                            trans_escape_sequence (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.opt
                        (fun v ->
                          trans_quoted_content_i_square (Run.matcher_token v)
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_quoted_keyword ((kind, body) : mt) : CST.quoted_keyword =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Quoted_i_double (
                  trans_quoted_i_double (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Quoted_i_single (
                  trans_quoted_i_single (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_imm_tok_pat_5eb9c21 (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_remote_call_with_parentheses ((kind, body) : mt) : CST.remote_call_with_parentheses =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_remote_dot (Run.matcher_token v0),
            trans_call_arguments_with_parentheses_immediate (Run.matcher_token v1)
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.opt
                        (fun v -> trans_newline_before_do (Run.matcher_token v))
                        v0
                      ,
                      trans_do_block (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_remote_call_without_parentheses ((kind, body) : mt) : CST.remote_call_without_parentheses =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_remote_dot (Run.matcher_token v0),
            Run.opt
              (fun v ->
                trans_call_arguments_without_parentheses (Run.matcher_token v)
              )
              v1
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.opt
                        (fun v -> trans_newline_before_do (Run.matcher_token v))
                        v0
                      ,
                      trans_do_block (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_remote_dot ((kind, body) : mt) : CST.remote_dot =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_and (
                  (match v with
                  | Alt (0, v) ->
                      `And (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `In (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Not (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Or (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `When (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `True (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `False (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Nil (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (8, v) ->
                      `After (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (9, v) ->
                      `Catch (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (10, v) ->
                      `Do (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (11, v) ->
                      `Else (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (12, v) ->
                      `End (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (13, v) ->
                      `Fn (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (14, v) ->
                      `Rescue (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (2, v) ->
                `Op_id (
                  trans_operator_identifier (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Quoted_i_double (
                  trans_quoted_i_double (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Quoted_i_single (
                  trans_quoted_i_single (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_rescue_block ((kind, body) : mt) : CST.rescue_block =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_terminator (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Choice_stab_clause_rep_term_choice_stab_clause (
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            (match v0 with
                            | Alt (0, v) ->
                                `Stab_clause (
                                  trans_stab_clause (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                            ,
                            Run.repeat
                              (fun v ->
                                (match v with
                                | Seq [v0; v1] ->
                                    (
                                      trans_terminator (Run.matcher_token v0),
                                      (match v1 with
                                      | Alt (0, v) ->
                                          `Stab_clause (
                                            trans_stab_clause (Run.matcher_token v)
                                          )
                                      | _ -> assert false
                                      )
                                    )
                                | _ -> assert false
                                )
                              )
                              v1
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `Choice_exp_rep_term_choice_exp_opt_term (
                      (match v with
                      | Seq [v0; v1; v2] ->
                          (
                            (match v0 with
                            | Alt (0, v) ->
                                `Exp (
                                  trans_expression (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                            ,
                            Run.repeat
                              (fun v ->
                                (match v with
                                | Seq [v0; v1] ->
                                    (
                                      trans_terminator (Run.matcher_token v0),
                                      (match v1 with
                                      | Alt (0, v) ->
                                          `Exp (
                                            trans_expression (Run.matcher_token v)
                                          )
                                      | _ -> assert false
                                      )
                                    )
                                | _ -> assert false
                                )
                              )
                              v1
                            ,
                            Run.opt
                              (fun v -> trans_terminator (Run.matcher_token v))
                              v2
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_sigil ((kind, body) : mt) : CST.sigil =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Imm_tok_pat_0db2d54_choice_quoted_i_double (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        trans_imm_tok_pat_0db2d54 (Run.matcher_token v0),
                        (match v1 with
                        | Alt (0, v) ->
                            `Quoted_i_double (
                              trans_quoted_i_double (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Quoted_i_single (
                              trans_quoted_i_single (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Quoted_i_here_single (
                              trans_quoted_i_heredoc_single (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Quoted_i_here_double (
                              trans_quoted_i_heredoc_double (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Quoted_i_paren (
                              trans_quoted_i_parenthesis (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Quoted_i_curl (
                              trans_quoted_i_curly (Run.matcher_token v)
                            )
                        | Alt (6, v) ->
                            `Quoted_i_square (
                              trans_quoted_i_square (Run.matcher_token v)
                            )
                        | Alt (7, v) ->
                            `Quoted_i_angle (
                              trans_quoted_i_angle (Run.matcher_token v)
                            )
                        | Alt (8, v) ->
                            `Quoted_i_bar (
                              trans_quoted_i_bar (Run.matcher_token v)
                            )
                        | Alt (9, v) ->
                            `Quoted_i_slash (
                              trans_quoted_i_slash (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Imm_tok_pat_37640cd_choice_quoted_double (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        trans_imm_tok_pat_37640cd (Run.matcher_token v0),
                        (match v1 with
                        | Alt (0, v) ->
                            `Quoted_double (
                              trans_quoted_double (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Quoted_single (
                              trans_quoted_single (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Quoted_here_single (
                              trans_quoted_heredoc_single (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Quoted_here_double (
                              trans_quoted_heredoc_double (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Quoted_paren (
                              trans_quoted_parenthesis (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Quoted_curl (
                              trans_quoted_curly (Run.matcher_token v)
                            )
                        | Alt (6, v) ->
                            `Quoted_square (
                              trans_quoted_square (Run.matcher_token v)
                            )
                        | Alt (7, v) ->
                            `Quoted_angle (
                              trans_quoted_angle (Run.matcher_token v)
                            )
                        | Alt (8, v) ->
                            `Quoted_bar (
                              trans_quoted_bar (Run.matcher_token v)
                            )
                        | Alt (9, v) ->
                            `Quoted_slash (
                              trans_quoted_slash (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_imm_tok_pat_8f9e87e (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_stab_clause ((kind, body) : mt) : CST.stab_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v -> trans_stab_clause_left (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_body (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_stab_clause_arguments_with_parentheses ((kind, body) : mt) : CST.stab_clause_arguments_with_parentheses =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Exp_rep_COMMA_exp_opt_COMMA_keywos (
                      (match v with
                      | Seq [v0; v1; v2] ->
                          (
                            trans_expression (Run.matcher_token v0),
                            Run.repeat
                              (fun v ->
                                (match v with
                                | Seq [v0; v1] ->
                                    (
                                      Run.trans_token (Run.matcher_token v0),
                                      trans_expression (Run.matcher_token v1)
                                    )
                                | _ -> assert false
                                )
                              )
                              v1
                            ,
                            Run.opt
                              (fun v ->
                                (match v with
                                | Seq [v0; v1] ->
                                    (
                                      Run.trans_token (Run.matcher_token v0),
                                      trans_keywords (Run.matcher_token v1)
                                    )
                                | _ -> assert false
                                )
                              )
                              v2
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `Keywos (
                      trans_keywords (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_stab_clause_arguments_with_parentheses_with_guard ((kind, body) : mt) : CST.stab_clause_arguments_with_parentheses_with_guard =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_stab_clause_arguments_with_parentheses (Run.matcher_token v0)
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_stab_clause_arguments_without_parentheses ((kind, body) : mt) : CST.stab_clause_arguments_without_parentheses =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Exp_rep_COMMA_exp_opt_COMMA_keywos (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            Run.trans_token (Run.matcher_token v0),
                            trans_expression (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                  ,
                  Run.opt
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            Run.trans_token (Run.matcher_token v0),
                            trans_keywords (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                    v2
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Keywos (
            trans_keywords (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_stab_clause_arguments_without_parentheses_with_guard ((kind, body) : mt) : CST.stab_clause_arguments_without_parentheses_with_guard =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_stab_clause_arguments_without_parentheses (Run.matcher_token v0)
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_stab_clause_left ((kind, body) : mt) : CST.stab_clause_left =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Stab_clause_args_with_parens_bf4a580 (
            trans_stab_clause_arguments_with_parentheses (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Stab_clause_args_with_parens_with_guard_9d9f341 (
            trans_stab_clause_arguments_with_parentheses_with_guard (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Stab_clause_args_with_parens_a52ef95 (
            trans_stab_clause_arguments_without_parentheses (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Stab_clause_args_with_parens_with_guard_cfbae3b (
            trans_stab_clause_arguments_without_parentheses_with_guard (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_string_ ((kind, body) : mt) : CST.string_ =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Quoted_i_double (
            trans_quoted_i_double (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Quoted_i_here_double (
            trans_quoted_i_heredoc_double (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_struct_ ((kind, body) : mt) : CST.struct_ =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Alias (
            trans_alias (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Atom (
            trans_atom (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Un_op (
            trans_unary_operator (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Dot (
            trans_dot (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Call_with_parens (
            trans_call_with_parentheses (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_tuple ((kind, body) : mt) : CST.tuple =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                trans_items_with_trailing_separator (Run.matcher_token v)
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_unary_operator ((kind, body) : mt) : CST.unary_operator =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Opt_before_un_op_AMP_capt_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.opt
                    (fun v -> trans_before_unary_op (Run.matcher_token v))
                    v0
                  ,
                  Run.trans_token (Run.matcher_token v1),
                  trans_capture_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Opt_before_un_op_choice_PLUS_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.opt
                    (fun v -> trans_before_unary_op (Run.matcher_token v))
                    v0
                  ,
                  (match v1 with
                  | Alt (0, v) ->
                      `PLUS (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `DASH (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `BANG (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `HAT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `TILDETILDETILDE (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Not (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Opt_before_un_op_AT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.opt
                    (fun v -> trans_before_unary_op (Run.matcher_token v))
                    v0
                  ,
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (3, v) ->
          `Opt_before_un_op_AMP_int (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.opt
                    (fun v -> trans_before_unary_op (Run.matcher_token v))
                    v0
                  ,
                  Run.trans_token (Run.matcher_token v1),
                  trans_integer (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_source ((kind, body) : mt) : CST.source =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v -> trans_terminator (Run.matcher_token v))
              v0
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      trans_expression (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                trans_terminator (Run.matcher_token v0),
                                trans_expression (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                      ,
                      Run.opt
                        (fun v -> trans_terminator (Run.matcher_token v))
                        v2
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let parse_input_tree input_tree =
  let orig_root_node = Tree_sitter_parsing.root input_tree in
  let src = Tree_sitter_parsing.src input_tree in
  let errors = Run.extract_errors src orig_root_node in
  let root_node = Run.remove_extras ~extras orig_root_node in
  let matched_tree = Run.match_tree children_regexps src root_node in
  let opt_program = Option.map trans_source matched_tree in
  Parsing_result.create src opt_program errors

let string ?src_file contents =
  let input_tree = parse_source_string ?src_file contents in
  parse_input_tree input_tree

let file src_file =
  let input_tree = parse_source_file src_file in
  parse_input_tree input_tree

